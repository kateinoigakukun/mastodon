#!/usr/bin/env ruby
require "bundler/setup"
require "fileutils"
require "tempfile"
require "json"
require "etc"

def with_env(hash)
  old_values = {}
  hash.each do |key, value|
    old_values[key] = ENV[key]
    ENV[key] = value
    puts "#{key}=#{value}"
  end
  yield
ensure
  old_values.each do |key, value|
    ENV[key] = value
  end
end

def system(command)
  puts command
  ret = super(command)
  raise "Command failed with status #{$?.exitstatus}" unless ret
  ret
end

RUBYGEMS_SOURCE = File.join(Dir.pwd, "vendor/rubygems")
JCO_SOURCE = "./pwa/node_modules/@bytecodealliance/jco"
WASI_SDK_PATH = ENV["WASI_SDK_PATH"] || raise("WASI_SDK_PATH environment variable is not set")
IDN_DIR = File.join(Dir.pwd, "tmp/libidn/install")
DEST_DIR = "tmp/standalone_web"
RUBY_BIN = "tmp/ruby.wasm"

ENV["RUBY_WASM_EXPERIMENTAL_DYNAMIC_LINKING"] = "1"
ENV["RAILS_WEB"] = "1"

system("bundle exec rbwasm build -o /dev/null --ruby-version head --dest-dir #{DEST_DIR} --disable-gems")

unless File.exist?("tmp/libidn/install/usr/local/lib/libidn.a")
  unless File.exist?("tmp/libidn")
    system("git init tmp/gnulib")
    system("git -C tmp/gnulib remote add origin https://git.savannah.gnu.org/git/gnulib.git || true")
    system("git -C tmp/gnulib fetch --depth 1 origin 5b92dd0a45c8d27f13a21076b57095ea5e220870")
    system("git -C tmp/gnulib checkout FETCH_HEAD")
    Dir.glob("patches/gnulib/*.patch").each do |patch|
      system("git -C tmp/gnulib am ../../#{patch}")
    end
  end

  unless File.exist?("tmp/libidn")
    system("git clone https://git.savannah.gnu.org/git/libidn.git tmp/libidn --branch v1.42")
    Dir.chdir("tmp/libidn") do
      system("GNULIB_SRCDIR=../gnulib ./bootstrap --skip-po")
    end
  end

  puts "Building libidn"
  FileUtils.mkdir_p("tmp/libidn/build")
  Dir.chdir("tmp/libidn/build") do
    system(
      [
        "../configure", "--host", "wasm32-wasi",
        "--enable-cross-guesses=risky", "--disable-doc",
        "CFLAGS='-D_WASI_EMULATED_PROCESS_CLOCKS -fPIC'", "LDFLAGS='-lwasi-emulated-process-clocks'",
        "RANLIB=#{WASI_SDK_PATH}/bin/llvm-ranlib", "AR=#{WASI_SDK_PATH}/bin/llvm-ar", "CC=#{WASI_SDK_PATH}/bin/clang",
      ].join(" ")
    )
    system("make -j#{Etc.nprocessors}")
    system("make install DESTDIR=#{IDN_DIR}")
  end
end


Bundler.with_original_env do
  Tempfile.create do |f|
    # temp gemrc
    f.write(<<~GEMRC)
    install_extension_in_lib: false
    GEMRC
    f.close

    with_env(
      "BUNDLE_ONLY" => "web",
      "BUNDLE_FROZEN" => "true",
      "BUNDLE_PATH" => File.expand_path(File.join(DEST_DIR, "bundle")),
      "BUNDLE_BUILD__JS" => "--enable-component-model",
      "BUNDLE_BUILD__IDN___RUBY" => "--with-idn-dir=#{File.join(IDN_DIR, "usr/local")}",
      "RUBYOPT" => "-I#{RUBYGEMS_SOURCE}/lib",
      "GEMRC" => f.path,
    ) do
      system(%Q(#{RUBYGEMS_SOURCE}/bundler/exe/bundle install --target-rbconfig #{Dir.pwd}/rubies/ruby-head-wasm32-unknown-wasip1-pic-full/usr/local/lib/ruby/3.4.0+0/wasm32-wasi/rbconfig.rb))
    end
  end
end

[
  [
    "io-console", "0.7.2", [
      [
        "io/console.rb", <<~RUBY
class IO
  def winsize
    [80, 24]
  end

  def wait_readable(timeout = nil)
    false
  end

  def raw(**kwargs)
    yield
  end
end
RUBY
      ],
      [
        "io/console/size.rb", ""
      ],
    ]
  ],
  ["websocket-driver", "0.7.6"],
].each do |gem_name, version, files|
  spec = Gem::Specification.new do |s|
    s.name = gem_name
    s.version = version
    s.require_paths = ["lib"]
  end
  specs_dir = Dir.glob(File.join(DEST_DIR, "bundle/ruby/*/specifications")).first
  spec_path = File.join(specs_dir, "#{gem_name}-#{version}.gemspec")
  puts "[HACK] Creating dummy gemspec #{spec_path}"
  File.write(spec_path, spec.to_ruby)
  if files
    files.each do |path, contents|
      lib_path = File.join(File.dirname(specs_dir), "gems/#{gem_name}-#{version}/lib", path)
      puts "[HACK] Creating dummy lib #{lib_path}"
      FileUtils.mkdir_p(File.dirname(lib_path))
      File.write(lib_path, contents || "")
    end
  end
end

[
  ["io-wait", "io/wait.rb", ""],
  [
    "socket", "socket.rb", <<~RUBY
class BasicSocket
  def initialize(...)
    raise NotImplementedError, "Socket is not supported in WASM"
  end
end
class Socket < BasicSocket
  AF_UNSPEC = 0
  AF_INET = 1
end
class IPSocket < Socket
  def self.getaddress(...)
    raise NotImplementedError, "Socket is not supported in WASM"
  end
end
class TCPSocket < Socket; end
    RUBY
  ],
].each do |lib_name, path, contents|
  lib_path = File.join(DEST_DIR, "usr/local/lib/ruby/3.4.0+0/wasm32-wasi/#{path}")
  FileUtils.mkdir_p(File.dirname(lib_path))
  puts "[HACK] Creating dummy lib #{lib_path}"
  File.write(lib_path, contents)
end

# Linking dynamic libraries
system(
  "bundle exec rbwasm build -o #{RUBY_BIN} --ruby-version head --dest-dir #{DEST_DIR} --disable-gems --without-stdlib enc"
)

def runruby(args)
  FileUtils.mkdir_p("#{DEST_DIR}/home/me")
  system (%W[
    wasmtime run
    --env BUNDLE_ONLY=web
    --env BUNDLE_PATH=/bundle
    --env BUNDLE_GEMFILE=/rails/Gemfile
    --env HOME=/home/me
    --env RAILS_ENV=production
    --env RAILS_WEB=1
    --dir #{DEST_DIR}/home/me::/home/me
    --dir .::/rails
    --dir #{DEST_DIR}/usr::/usr
    --dir #{DEST_DIR}/bundle::/bundle
  ] + [RUBY_BIN] + args.to_a).map { "'#{_1}'" }.join(" ")
end

FileUtils.mkdir_p("#{DEST_DIR}/rails")
%w[app config db lib public].each do |dir|
  system("rsync -a #{dir}/ #{DEST_DIR}/rails/#{dir}/")
end
FileUtils.cp("Gemfile", "#{DEST_DIR}/rails/Gemfile")
FileUtils.cp("Gemfile.lock", "#{DEST_DIR}/rails/Gemfile.lock")
File.write("#{DEST_DIR}/rails/.env.production", <<~ENV)
LOCAL_DOMAIN=localhost
SINGLE_USER_MODE=true
SECRET_KEY_BASE=a4e798c5119316eecd8152a27b249d7c8dd3b5f91de4b1c17cb3aa4dded992d491edac2c0f04ad9b771c70627d863399994126068c8c7ff68bff207e5a74aa30
OTP_SECRET=d6ded6df389090f80be7569a6a660911d6eb43dae31833f436ab2c372a97ce0c18758fcba08ee1f96d4d60e77600f9705cc3e81a594c793e417b59a71e882f69
VAPID_PRIVATE_KEY=LsPOYsXyZhOylr7LjXERLSLCu077ViOWAOBlEgYVmeo=
VAPID_PUBLIC_KEY=BNuQei3AJ2IChENzjREilbluz0k1CYNZgqlGaupOLlzZ6Wi5CX4Ei7T0Ndl5Sq62FXDpEDSzPCTPPkQSfekLawA=
ENV
FileUtils.cp("app.json", "#{DEST_DIR}/rails/app.json")
FileUtils.cp("config.ru", "#{DEST_DIR}/rails/config.ru")

system(%W[
  tar cfz pwa/dist/fs.tar.gz
  --exclude='**/.git/**/*'
  --exclude='rails/public/emoji'
  --exclude='rails/public/ocr'
  --exclude='bundle/ruby/*/cache/**/*'
  --exclude='bundle/ruby/*/bundler/gems/nokogiri-*/ext/**/*'
  --exclude='bundle/ruby/*/bundler/gems/nokogiri-*/ports/**/*'
  -C #{DEST_DIR}
  .
].map { "'#{_1}'" }.join(" "))

puts "Creating pwa/dist/fs.meta.json"
File.write("pwa/dist/fs.meta.json", JSON.dump({
  number_of_files: Dir.glob("#{DEST_DIR}/**/*").size,
}))
system("rsync -a public/ pwa/dist/rails/public/")

system("#{JCO_SOURCE}/src/jco.js transpile --instantiation --valid-lifting-optimization #{RUBY_BIN} -o pwa/dist/component")
Dir.chdir("pwa") { system("node ./build.mjs") }
